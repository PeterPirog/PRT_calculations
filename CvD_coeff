import numpy as np
from scipy.optimize import curve_fit
from GTC import *
from  GTCext import  psolve,pinv, urealext

def CVD_R_neg(t, C):
    R = 100.139867 * (1 + (3.984961E-3 * t) + (-5.879329E-7 * t ** 2) + C * (t - 100) * t ** 3)
    return R


def CVD_R_pos(t, A, B, ):
    R = 100.139867 * (1 + A * t + B * t ** 2)
    return R


def CVD_R(t, A, B, C):
    if t < 0:
        R = 100.139867 * (1 + (A * t) + (B * t ** 2) + C * (t - 100) * t ** 3)
    else:
        R = 100.139867 * (1 + A * t + B * t ** 2) + C * 0
    return R


def CVD_Rv2(t, A, B, C):
    C=C*(np.sign(t)-1)/(-2)
    R = 100.139867 * (1 + (A * t) + (B * t ** 2) + C * (t - 100) * t ** 3)
    return R


# R0=100.139867
# A=3.984201E-3
# B=-5.86858E-7
# C=-6.24817E-12

""""R = np.array([67.7848, 84.5387, 100.1399, 189.513, 257.2021, 337.9695])
Tw = np.array([-80.0078, -38.8397, 0, 231.9287, 419.5246, 660.323])

R1 = np.array([67.7848, 71.88702, 80.032363, 84.5387, 100.1399])
Tw1 = np.array([-80.0078, -70, -50, -38.8397, 0])

R2 = np.array([100.1399, 189.513, 257.2021, 337.9695])
Tw2 = np.array([0, 231.9287, 419.5246, 660.323])"""""

R = [67.7848, 84.5387, 100.1399, 189.513, 257.2021, 337.9695]
UR=[0.0109,0.0099,0.0098,0.0106,0.0165,0.0071]

R0=R[2]

T = [-80.0078, -38.8397, 0, 231.9287, 419.5246, 660.323]
UT=[0.027,0.025,0.025,0.029,0.048,0.022]

R=urealext(value_list=R, unc_list=UR, k=2, array_label='R', df=GTC.inf)
print("R=",R)
T=urealext(value_list=T, unc_list=UT, k=2, array_label='T', df=GTC.inf)



#Cf = curve_fit(CVD_Rv2, Tw, R)


